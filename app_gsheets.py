# app_gsheets.py ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets ‡∏ñ‡∏≤‡∏ß‡∏£)
# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
#  - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤" ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMM-XXX (‡∏£‡∏±‡∏ô‡∏ô‡∏¥‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
#  - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î, ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚â§30/‚â§15 ‡∏ß‡∏±‡∏ô
#  - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô/‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå
#  - ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" ‡∏ï‡∏¥‡πä‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
#  - ‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
#  - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel/CSV
#  - ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö dtype ‡πÄ‡∏õ‡πá‡∏ô string)
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ‡πÉ‡∏ä‡πâ engine=xlsxwriter ‚áí ‡πÄ‡∏û‡∏¥‡πà‡∏° "xlsxwriter" ‡πÉ‡∏ô requirements.txt

from datetime import date
from io import BytesIO
import re

import pandas as pd
import streamlit as st
from dateutil.relativedelta import relativedelta

import gspread
from gspread_dataframe import set_with_dataframe

# ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï
COLUMNS = [
    "id",            # ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á)
    "contract_no",   # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤ YYYYMM-XXX (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    "shop_name",
    "contact_name",
    "phone",
    "start_date",
    "months",
    "end_date",
    "cancelled",     # True/False
]

# ---------------------- Google Sheets ----------------------
def _connect_ws():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô st.secrets['gsheets'] ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô worksheet ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
    cfg = st.secrets["gsheets"]

    creds_dict = {
        "type": cfg["type"],
        "project_id": cfg["project_id"],
        "private_key_id": cfg["private_key_id"],
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ \\n ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á
        "private_key": str(cfg["private_key"]).replace("\\n", "\n"),
        "client_email": cfg["client_email"],
        "client_id": cfg["client_id"],
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": cfg.get("client_x509_cert_url", ""),
        "universe_domain": "googleapis.com",
    }
    gc = gspread.service_account_from_dict(creds_dict)

    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á URL ‡πÅ‡∏•‡∏∞ ID
    sheet_url = cfg.get("sheet_url", "")
    sheet_id = cfg.get("sheet_id", "")
    try:
        if sheet_url:
            sh = gc.open_by_url(sheet_url)
        elif sheet_id:
            sh = gc.open_by_key(sheet_id)
        else:
            raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà gsheets.sheet_url ‡∏´‡∏£‡∏∑‡∏≠ gsheets.sheet_id ‡πÉ‡∏ô Secrets")
    except gspread.exceptions.NoValidUrlKeyFound:
        if sheet_id:
            sh = gc.open_by_key(sheet_id)
        else:
            raise

    title = cfg.get("worksheet", "leases")
    try:
        ws = sh.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=title, rows="1000", cols="20")
        ws.append_row(COLUMNS)

    # ‡πÑ‡∏°‡πà clear ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢ (‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ save ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    return ws

@st.cache_data(ttl=5)
def load_data():
    ws = _connect_ws()
    rows = ws.get_all_records()  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
    df = pd.DataFrame(rows)

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    for c in COLUMNS:
        if c not in df.columns:
            if c == "cancelled":
                df[c] = False
            else:
                df[c] = pd.NA

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    for col in ["start_date", "end_date"]:
        df[col] = pd.to_datetime(df[col], errors="coerce").dt.date
    if not df.empty:
        df["id"] = pd.to_numeric(df["id"], errors="coerce")
        df["months"] = pd.to_numeric(df["months"], errors="coerce")

    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string (‡∏Å‡∏±‡∏ô .str error)
    for c in ["contract_no", "shop_name", "contact_name", "phone"]:
        df[c] = df[c].astype("string")

    # cancelled: map ‡πÄ‡∏õ‡πá‡∏ô bool
    df["cancelled"] = df["cancelled"].map(
        lambda v: str(v).strip().lower() in {"true","1","yes","y","t","‡πÉ‡∏ä‡πà","‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å","cancel","cancelled"}
    )

    if not df.empty:
        df = df.sort_values(by=["end_date", "id"], ascending=[True, True]).reset_index(drop=True)
    return df


def save_data(df: pd.DataFrame):
    ws = _connect_ws()
    out = df.copy()
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á ISO
    for c in ["start_date", "end_date"]:
        out[c] = out[c].apply(lambda d: d.isoformat() if pd.notna(d) else "")
    # ‡πÅ‡∏õ‡∏•‡∏á cancelled ‡πÄ‡∏õ‡πá‡∏ô True/False
    out["cancelled"] = out["cancelled"].astype(bool)
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏° COLUMNS
    ws.clear()
    set_with_dataframe(ws, out[COLUMNS], include_index=False, include_column_header=True, resize=True)

# ------------------------- Utils ---------------------------
def next_id(df: pd.DataFrame) -> int:
    if df.empty or "id" not in df:
        return 1
    return int((pd.to_numeric(df["id"], errors="coerce").fillna(0)).max() + 1)


def calc_end_date(start: date, months: int) -> date:
    return start + relativedelta(months=+int(months))


def days_until(d: date):
    if pd.isna(d):
        return None
    return (d - date.today()).days


def add_record(df: pd.DataFrame, record: dict) -> pd.DataFrame:
    return pd.concat([df, pd.DataFrame([record])], ignore_index=True)


def _contains(col: pd.Series, q: str) -> pd.Series:
    """helper: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå + ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ NA + ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô"""
    return col.astype("string").str.contains(q, case=False, na=False)


def filter_by_query(df: pd.DataFrame, q: str) -> pd.DataFrame:
    if not q:
        return df
    q = q.strip()
    mask = (
        _contains(df["contract_no"], q)
        | _contains(df["shop_name"], q)
        | _contains(df["contact_name"], q)
        | _contains(df["phone"], q)
    )
    return df[mask]


def filter_by_expiry_window(
    df: pd.DataFrame,
    within_days: int | None = None,
    start: date | None = None,
    end: date | None = None,
) -> pd.DataFrame:
    tmp = df.copy()
    tmp["days_left"] = tmp["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å
    if within_days is not None:
        tmp = tmp[(~tmp["cancelled"]) & (tmp["days_left"].notna()) & (tmp["days_left"] >= 0) & (tmp["days_left"] <= within_days)]

    if start is not None:
        tmp = tmp[tmp["end_date"].apply(lambda d: pd.notna(d) and d >= start)]

    if end is not None:
        tmp = tmp[tmp["end_date"].apply(lambda d: pd.notna(d) and d <= end)]

    return tmp


def style_status(days_left: int | None, cancelled: bool) -> str:
    if cancelled:
        return "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
    if days_left is None:
        return "-"
    if days_left < 0:
        return f"‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß {-days_left} ‡∏ß‡∏±‡∏ô"
    if days_left <= 15:
        return f"‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‚â§15 ‡∏ß‡∏±‡∏ô) - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"
    if days_left <= 30:
        return f"‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‚â§30 ‡∏ß‡∏±‡∏ô) - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"
    return f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"


def to_download_bytes(df: pd.DataFrame, as_excel: bool = True) -> bytes:
    if as_excel:
        bio = BytesIO()
        with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, sheet_name="filtered")
        bio.seek(0)
        return bio.read()
    return df.to_csv(index=False).encode("utf-8-sig")


def next_contract_no(df: pd.DataFrame, start: date) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏ö‡∏ö YYYYMM-XXX ‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á start_date"""
    yyyymm = f"{start:%Y%m}"
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
    seqs = []
    if not df.empty and "contract_no" in df.columns:
        pat = re.compile(rf"^{yyyymm}-(\d+)$")
        for v in df["contract_no"].fillna(""):
            m = pat.match(str(v))
            if m:
                try:
                    seqs.append(int(m.group(1)))
                except ValueError:
                    pass
    next_seq = (max(seqs) + 1) if seqs else 1
    return f"{yyyymm}-{next_seq:03d}"

# --------------------------- UI ----------------------------
st.set_page_config(page_title="‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ - Google Sheets", page_icon="üìë", layout="wide")
st.title("üìë ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets)")

with st.sidebar:
    st.header("‡πÄ‡∏°‡∏ô‡∏π")
    page = st.radio("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤:", ["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"], index=0)
    st.caption("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡πÉ‡∏ô Google Sheets")

_df = load_data()

# ----------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ------------------
if page.startswith("‚ûï"):
    st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà")
    with st.form("add_form", clear_on_submit=True):
        c1, c2 = st.columns([2, 2])
        with c1:
            start_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ *", value=date.today())
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)
            contract_no_preview = next_contract_no(_df, start_date)
            st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", value=contract_no_preview, disabled=True)
            shop_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ *")
            contact_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ *")
        with c2:
            months = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πà‡∏≤ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) *", min_value=1, max_value=240, value=12, step=1)
            end_date = calc_end_date(start_date, months)
            st.info(f"‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤: **{end_date.strftime('%Y-%m-%d')}**")
            phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *")

        if st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤"):
            if not all([shop_name.strip(), contact_name.strip(), phone.strip(), start_date, months]):
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                rec = {
                    "id": next_id(_df),
                    "contract_no": next_contract_no(_df, start_date),
                    "shop_name": shop_name.strip(),
                    "contact_name": contact_name.strip(),
                    "phone": phone.strip(),
                    "start_date": start_date,
                    "months": int(months),
                    "end_date": end_date,
                    "cancelled": False,
                }
                new_df = add_record(_df, rec)
                save_data(new_df)
                st.cache_data.clear()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä cache ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.rerun()

# -------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô -----------------
elif page.startswith("üîé"):
    st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ & ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤")

    with st.expander("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", expanded=True):
        c1, c2, c3, c4 = st.columns([2, 2, 2, 2])
        with c1:
            q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô/‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        with c2:
            within = st.selectbox("‡∏à‡∏∞‡πÅ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "15 ‡∏ß‡∏±‡∏ô", "30 ‡∏ß‡∏±‡∏ô", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"], index=2)
        with c3:
            start = st.date_input("‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=None, format="YYYY-MM-DD")
        with c4:
            end = st.date_input("‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=None, format="YYYY-MM-DD")

        within_days = None
        if within == "15 ‡∏ß‡∏±‡∏ô":
            within_days = 15
        elif within == "30 ‡∏ß‡∏±‡∏ô":
            within_days = 30
        elif within == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á":
            within_days = st.number_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ß‡∏±‡∏ô)", min_value=1, max_value=3650, value=60, step=1)

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏ß‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢)
    df_q = filter_by_query(_df, q)
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
    df_f = filter_by_expiry_window(
        df_q,
        within_days=within_days,
        start=start if start else None,
        end=end if end else None,
    ) if within_days or start or end else df_q.copy()

    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    df_f["days_left"] = df_f["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)
    df_f["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = df_f.apply(lambda r: style_status(r["days_left"], r["cancelled"]), axis=1)

    # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)
    df_30 = filter_by_expiry_window(_df, within_days=30)
    df_15 = filter_by_expiry_window(_df, within_days=15)
    if not df_15.empty:
        st.error(f"‡∏°‡∏µ {len(df_15)} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ß‡∏±‡∏ô")
    elif not df_30.empty:
        st.warning(f"‡∏°‡∏µ {len(df_30)} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô")
    else:
        st.success("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô")

    st.markdown("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
    if df_f.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
    else:
        show_cols = ["id","contract_no","shop_name","contact_name","phone","start_date","months","end_date","cancelled","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
        edited = st.data_editor(
            df_f[show_cols],
            use_container_width=True,
            hide_index=True,
            column_config={
                "cancelled": st.column_config.CheckboxColumn(
                    "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
                    help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
                )
            },
            disabled=[c for c in show_cols if c != "cancelled" and c != "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
            key="editor_search",
        )
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤"):
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ _df ‡∏ï‡∏≤‡∏° id
            merged = _df.set_index("id").copy()
            for _id, is_cancel in zip(edited["id"].tolist(), edited["cancelled"].tolist()):
                merged.at[_id, "cancelled"] = bool(is_cancel)
            save_data(merged.reset_index())
            st.cache_data.clear()
            st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            st.rerun()

    c1, c2 = st.columns(2)
    with c1:
        st.download_button(
            "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel (.xlsx)",
            data=to_download_bytes(df_f, as_excel=True),
            file_name="leases_filtered.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    with c2:
        st.download_button(
            "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV",
            data=to_download_bytes(df_f, as_excel=False),
            file_name="leases_filtered.csv",
            mime="text/csv",
        )

# --------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ------------------
else:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)")

    if _df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        dfv = _df.copy()
        dfv["days_left"] = dfv["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)
        dfv["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = dfv.apply(lambda r: style_status(r["days_left"], r["cancelled"]), axis=1)
        st.dataframe(
            dfv[["id","contract_no","shop_name","contact_name","phone","start_date","months","end_date","cancelled","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]],
            use_container_width=True,
        )

