# app.py
# ------------------------------------------------------------
# ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå Excel)
# ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Streamlit + pandas + openpyxl + python-dateutil
# ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
#  - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤, ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
#    -> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
#  - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 30 ‡πÅ‡∏•‡∏∞ 15 ‡∏ß‡∏±‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
#  - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤
#  - ‡∏î‡∏π/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö Excel
#  - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô Excel/CSV
# ------------------------------------------------------------

import os
from datetime import date
from io import BytesIO

import pandas as pd
from dateutil.relativedelta import relativedelta
import streamlit as st

# --------------------- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå ------------------------
DATA_DIR = "data"
EXCEL_PATH = os.path.join(DATA_DIR, "leases.xlsx")
SHEET_NAME = "leases"

COLUMNS = [
    "id",           # running id
    "shop_name",
    "contact_name",
    "phone",
    "start_date",
    "months",
    "end_date",
]

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ---------------------
def ensure_storage():
    os.makedirs(DATA_DIR, exist_ok=True)
    if not os.path.exists(EXCEL_PATH):
        df = pd.DataFrame(columns=COLUMNS)
        with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name=SHEET_NAME)

@st.cache_data(ttl=5)
def load_data():
    ensure_storage()
    try:
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, dtype={"phone": str})
    except Exception:
        df = pd.DataFrame(columns=COLUMNS)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime.date
    for col in ["start_date", "end_date"]:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors="coerce").dt.date

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
    for c in COLUMNS:
        if c not in df.columns:
            df[c] = pd.NA

    if not df.empty:
        df = df.sort_values(by=["end_date", "id"], ascending=[True, True])

    return df.reset_index(drop=True)

def save_data(df: pd.DataFrame):
    ensure_storage()
    out = df.copy()
    with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl") as writer:
        out.to_excel(writer, index=False, sheet_name=SHEET_NAME)

def next_id(df: pd.DataFrame) -> int:
    if df.empty or "id" not in df:
        return 1
    return int((pd.to_numeric(df["id"], errors="coerce").fillna(0)).max() + 1)

def calc_end_date(start: date, months: int) -> date:
    return start + relativedelta(months=+int(months))

def days_until(d: date):
    if pd.isna(d):
        return None
    return (d - date.today()).days

def add_record(df: pd.DataFrame, record: dict) -> pd.DataFrame:
    return pd.concat([df, pd.DataFrame([record])], ignore_index=True)

def filter_by_query(df: pd.DataFrame, q: str) -> pd.DataFrame:
    if not q:
        return df
    q = q.strip().lower()
    mask = (
        df["shop_name"].fillna("").str.lower().str.contains(q)
        | df["contact_name"].fillna("").str.lower().str.contains(q)
        | df["phone"].fillna("").str.lower().str.contains(q)
    )
    return df[mask]

def filter_by_expiry_window(
    df: pd.DataFrame,
    within_days: int | None = None,
    start: date | None = None,
    end: date | None = None,
) -> pd.DataFrame:
    temp = df.copy()
    temp["days_left"] = temp["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)

    if within_days is not None:
        temp = temp[
            (temp["days_left"].notna())
            & (temp["days_left"] >= 0)
            & (temp["days_left"] <= within_days)
        ]

    if start is not None:
        temp = temp[temp["end_date"].apply(lambda d: pd.notna(d) and d >= start)]

    if end is not None:
        temp = temp[temp["end_date"].apply(lambda d: pd.notna(d) and d <= end)]

    return temp

def style_status(days_left: int | None) -> str:
    if days_left is None:
        return "-"
    if days_left < 0:
        return f"‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß {-days_left} ‡∏ß‡∏±‡∏ô"
    if days_left <= 15:
        return f"‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‚â§15 ‡∏ß‡∏±‡∏ô) - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"
    if days_left <= 30:
        return f"‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‚â§30 ‡∏ß‡∏±‡∏ô) - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"
    return f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"

def to_download_bytes(df: pd.DataFrame, as_excel: bool = True) -> bytes:
    if as_excel:
        bio = BytesIO()
        with pd.ExcelWriter(bio, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="filtered")
        bio.seek(0)
        return bio.read()
    else:
        return df.to_csv(index=False).encode("utf-8-sig")

# ------------------------ UI ‡∏´‡∏•‡∏±‡∏Å ---------------------------
st.set_page_config(page_title="‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ - Excel", page_icon="üìë", layout="wide")
st.title("üìë ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Excel)")

with st.sidebar:
    st.header("‡πÄ‡∏°‡∏ô‡∏π")
    page = st.radio("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤:", ["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"], index=0)
    st.markdown("‚Äî")
    st.caption("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô: `data/leases.xlsx`")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
_df = load_data()

# ---------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ --------------------
if page.startswith("‚ûï"):
    st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà")
    with st.form("add_form", clear_on_submit=True):
        col1, col2 = st.columns([2, 2])
        with col1:
            shop_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ *")
            contact_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ *")
            phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *", help="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 0812345678")
        with col2:
            start_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ *", value=date.today())
            months = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πà‡∏≤ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) *", min_value=1, max_value=240, value=12, step=1)
            end_date = calc_end_date(start_date, months)
            st.info(f"‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: **{end_date.strftime('%Y-%m-%d')}**")

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤")

        if submitted:
            if not all([shop_name.strip(), contact_name.strip(), phone.strip(), start_date, months]):
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ * ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
            else:
                rec = {
                    "id": next_id(_df),
                    "shop_name": shop_name.strip(),
                    "contact_name": contact_name.strip(),
                    "phone": phone.strip(),
                    "start_date": start_date,
                    "months": int(months),
                    "end_date": end_date,
                }
                new_df = add_record(_df, rec)
                save_data(new_df)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()

# ------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ------------------
elif page.startswith("üîé"):
    st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ & ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤")

    # ‡πÅ‡∏ñ‡∏ö‡∏Å‡∏£‡∏≠‡∏á
    with st.expander("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", expanded=True):
        c1, c2, c3, c4 = st.columns([2, 2, 2, 2])
        with c1:
            q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô/‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        with c2:
            within = st.selectbox("‡∏à‡∏∞‡πÅ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "15 ‡∏ß‡∏±‡∏ô", "30 ‡∏ß‡∏±‡∏ô", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"], index=2)
        with c3:
            start = st.date_input("‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=None, format="YYYY-MM-DD")
        with c4:
            end = st.date_input("‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=None, format="YYYY-MM-DD")

        within_days = None
        if within == "15 ‡∏ß‡∏±‡∏ô":
            within_days = 15
        elif within == "30 ‡∏ß‡∏±‡∏ô":
            within_days = 30
        elif within == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á":
            within_days = st.number_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ß‡∏±‡∏ô)", min_value=1, max_value=3650, value=60, step=1)

    df_q = filter_by_query(_df, q)
    df_f = filter_by_expiry_window(
        df_q,
        within_days=within_days,
        start=start if start else None,
        end=end if end else None,
    )

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏°‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡∏á (‡πÅ‡∏Å‡πâ KeyError)
    df_f = df_f.copy()
    df_f["days_left"] = df_f["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)
    df_f["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = df_f["days_left"].apply(style_status)

    # ‡πÅ‡∏ñ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏° (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    df_30 = filter_by_expiry_window(_df, within_days=30)
    df_15 = filter_by_expiry_window(_df, within_days=15)

    if not df_15.empty:
        st.error(f"‡∏°‡∏µ {len(df_15)} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ß‡∏±‡∏ô")
    elif not df_30.empty:
        st.warning(f"‡∏°‡∏µ {len(df_30)} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô")
    else:
        st.success("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô")

    st.markdown("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    if df_f.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
    else:
        st.dataframe(
            df_f[["id", "shop_name", "contact_name", "phone", "start_date", "months", "end_date", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]],
            use_container_width=True,
        )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    col_dl1, col_dl2 = st.columns(2)
    with col_dl1:
        st.download_button(
            "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel (.xlsx)",
            data=to_download_bytes(df_f, as_excel=True),
            file_name="leases_filtered.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    with col_dl2:
        st.download_button(
            "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV",
            data=to_download_bytes(df_f, as_excel=False),
            file_name="leases_filtered.csv",
            mime="text/csv",
        )

# -------------------- ‡∏´‡∏ô‡πâ‡∏≤: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î -------------------
else:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    if _df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö")
    else:
        df_view = _df.copy()
        df_view["days_left"] = df_view["end_date"].apply(lambda d: days_until(d) if pd.notna(d) else None)
        df_view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = df_view["days_left"].apply(style_status)

        st.dataframe(
            df_view[["id", "shop_name", "contact_name", "phone", "start_date", "months", "end_date", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]],
            use_container_width=True,
        )

        st.markdown("#### ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        st.caption("‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")

        edit_cols = ["id", "shop_name", "contact_name", "phone", "start_date", "months", "end_date"]
        editable = st.data_editor(
            _df[edit_cols],
            use_container_width=True,
            num_rows="dynamic",
            key="editor",
        )
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
            try:
                editable["id"] = pd.to_numeric(editable["id"], errors="coerce").astype("Int64")
                editable["months"] = pd.to_numeric(editable["months"], errors="coerce").astype("Int64")
                for c in ["start_date", "end_date"]:
                    editable[c] = pd.to_datetime(editable[c], errors="coerce").dt.date

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì end_date ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≤‡∏Å start+months ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ end_date ‡∏ß‡πà‡∏≤‡∏á
                mask_need_end = (
                    editable["end_date"].isna()
                    & editable["start_date"].notna()
                    & editable["months"].notna()
                )
                editable.loc[mask_need_end, "end_date"] = editable.loc[mask_need_end].apply(
                    lambda r: calc_end_date(r["start_date"], int(r["months"]))
                    if pd.notna(r["start_date"]) and pd.notna(r["months"])
                    else pd.NaT,
                    axis=1,
                )

                # ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° COLUMNS
                for c in COLUMNS:
                    if c not in editable.columns:
                        editable[c] = pd.NA
                editable = editable[COLUMNS]

                save_data(editable)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()
            except Exception as e:
                st.exception(e)
# -------------------------- ‡∏à‡∏ö‡πÑ‡∏ü‡∏•‡πå ---------------------------
